<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OpenAI FineTune</title>
      <link href="/2023/03/11/openai-finetune/"/>
      <url>/2023/03/11/openai-finetune/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenAI-FineTune"><a href="#OpenAI-FineTune" class="headerlink" title="OpenAI FineTune"></a>OpenAI FineTune</h1><ol><li>Prepare Training Data </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Prepare Training Data</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictprompts <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/chen.a.chen/Desktop/prompts.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>completions <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/chen.a.chen/Desktop/completions.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>trainingData <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>trainingData<span class="token punctuation">[</span><span class="token string">'prompt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">[</span>line<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> prompts<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>trainingData<span class="token punctuation">[</span><span class="token string">'completion'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">[</span>line<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> completions<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># Open a file for writing</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> outfile<span class="token punctuation">:</span>    <span class="token comment"># Convert dictionary to JSON string and write to file</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>trainingData<span class="token punctuation">,</span> outfile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Re-format Data</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">!openai tools fine_tunes<span class="token punctuation">.</span>prepare_data <span class="token operator">-</span>f <span class="token operator">&lt;</span>LOCAL_FILE<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>Upload file to get file id</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openai<span class="token keyword">import</span> os<span class="token comment"># set the OpenAI API key</span>openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">'{{your key}}'</span><span class="token comment"># prepare the training data</span>upload_response <span class="token operator">=</span> openai<span class="token punctuation">.</span>File<span class="token punctuation">.</span>create<span class="token punctuation">(</span>  <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/chen.a.chen/Desktop/data_prepared.jsonl'</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  purpose<span class="token operator">=</span><span class="token string">'fine-tune'</span><span class="token punctuation">)</span>file_id <span class="token operator">=</span> upload_response<span class="token punctuation">.</span><span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Start Fine Tune!</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonurl <span class="token operator">=</span> <span class="token string">"https://api.openai.com/v1/fine-tunes"</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"training_file"</span><span class="token punctuation">:</span> file_id<span class="token punctuation">}</span>headers <span class="token operator">=</span>  <span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span><span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string">"Authorization"</span><span class="token punctuation">:</span><span class="token string">"Bearer {{your key}}"</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>check the status</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonurl <span class="token operator">=</span> <span class="token string">"https://api.openai.com/v1/fine-tunes"</span>headers <span class="token operator">=</span>  <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token punctuation">:</span><span class="token string">"Bearer {{your key}}"</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>  headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OpenAI </tag>
            
            <tag> FineTune </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI Chat API</title>
      <link href="/2023/03/10/openai-chat-api/"/>
      <url>/2023/03/10/openai-chat-api/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenAI-Chat-API"><a href="#OpenAI-Chat-API" class="headerlink" title="OpenAI Chat API"></a>OpenAI Chat API</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># without stream</span><span class="token keyword">import</span> os<span class="token keyword">import</span> openai<span class="token keyword">class</span> <span class="token class-name">ChatApp</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Setting the API key to use the OpenAI API</span>        openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">'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'</span>        self<span class="token punctuation">.</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"You are a helpful assistant ."</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">chat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> message<span class="token punctuation">}</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> openai<span class="token punctuation">.</span>ChatCompletion<span class="token punctuation">.</span>create<span class="token punctuation">(</span>            model<span class="token operator">=</span><span class="token string">"gpt-3.5-turbo"</span><span class="token punctuation">,</span>            user <span class="token operator">=</span> user<span class="token punctuation">,</span>            messages<span class="token operator">=</span>self<span class="token punctuation">.</span>messages        <span class="token punctuation">)</span>        <span class="token comment"># enable here if you needs consecutive conversation</span>  <span class="token comment">#      self.messages.append({"role": "assistant", "content": response["choices"][0]["message"].content})</span>        <span class="token keyword">return</span> <span class="token string">"Assistant:\n"</span> <span class="token operator">+</span> response<span class="token punctuation">[</span><span class="token string">"choices"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User Name:'</span><span class="token punctuation">)</span>user <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>userPrompt <span class="token operator">=</span> ChatApp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nPrompt:'</span><span class="token punctuation">)</span>    prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> prompt <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>            completion <span class="token operator">=</span> userPrompt<span class="token punctuation">.</span>chat<span class="token punctuation">(</span>user<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>completion<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># with stream</span><span class="token keyword">import</span> os<span class="token keyword">import</span> openai<span class="token keyword">import</span> sseclient<span class="token keyword">class</span> <span class="token class-name">ChatApp</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Setting the API key to use the OpenAI API</span>        openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">'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'</span>        self<span class="token punctuation">.</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"You are a helpful assistant ."</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">chat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> message<span class="token punctuation">}</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> openai<span class="token punctuation">.</span>ChatCompletion<span class="token punctuation">.</span>create<span class="token punctuation">(</span>            model<span class="token operator">=</span><span class="token string">"gpt-3.5-turbo"</span><span class="token punctuation">,</span>            user <span class="token operator">=</span> user<span class="token punctuation">,</span>            stream <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            messages<span class="token operator">=</span>self<span class="token punctuation">.</span>messages        <span class="token punctuation">)</span>                ans <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> response<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">'content'</span> <span class="token keyword">in</span> event<span class="token punctuation">[</span><span class="token string">'choices'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'delta'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ans <span class="token operator">+=</span> event<span class="token punctuation">[</span><span class="token string">'choices'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'delta'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span><span class="token string">'choices'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'delta'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                <span class="token comment"># enable here if you needs consecutive conversation</span>        self<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> ans<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User Name:'</span><span class="token punctuation">)</span>user <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>userPrompt <span class="token operator">=</span> ChatApp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nPrompt:'</span><span class="token punctuation">)</span>    prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> prompt <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Assistant:'</span><span class="token punctuation">)</span>    completion <span class="token operator">=</span> userPrompt<span class="token punctuation">.</span>chat<span class="token punctuation">(</span>user<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenAI </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EC Website Chapter1_Env prepare</title>
      <link href="/2023/03/05/ec-website-chapter1-env-prepare/"/>
      <url>/2023/03/05/ec-website-chapter1-env-prepare/</url>
      
        <content type="html"><![CDATA[<h1 id="EC-Website-Chapter1-Env-prepare"><a href="#EC-Website-Chapter1-Env-prepare" class="headerlink" title="EC Website Chapter1_Env prepare"></a>EC Website Chapter1_Env prepare</h1><ol><li>Install atom, Git</li><li>Install virtual env</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 <span class="token operator">-</span>m pip install <span class="token operator">-</span><span class="token operator">-</span>user virtualenv<span class="token comment"># create a new</span>python3 <span class="token operator">-</span>m venv <span class="token punctuation">{</span><span class="token punctuation">{</span>ecom<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># enter into virtual env</span>source <span class="token punctuation">{</span><span class="token punctuation">{</span>ecom<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate<span class="token comment"># check all packages</span>pip freeze<span class="token comment"># deactiavte virtual env</span>deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>install Django</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install django<span class="token operator">==</span><span class="token number">3.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>start project</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">djangp<span class="token operator">-</span>admin startproject <span class="token punctuation">{</span><span class="token punctuation">{</span>ec<span class="token punctuation">}</span><span class="token punctuation">}</span>cd <span class="token punctuation">{</span><span class="token punctuation">{</span>ec<span class="token punctuation">}</span><span class="token punctuation">}</span>python manage<span class="token punctuation">.</span>py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> EC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to build your website - Hexo+Github Page</title>
      <link href="/2023/02/24/how-to-build-your-website-hexo-github-page/"/>
      <url>/2023/02/24/how-to-build-your-website-hexo-github-page/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-build-your-website-Hexo-Github-Page"><a href="#How-to-build-your-website-Hexo-Github-Page" class="headerlink" title="How to build your website: Hexo+Github Page"></a>How to build your website: Hexo+Github Page</h1><ul><li>Environment<ol><li>Install Git</li><li>Install Node.js</li><li><code>$ npm install -g hexo-cli</code></li></ol></li><li>Get Started<ol><li><code>$ hexo init {{folder}}</code></li><li><code>$ hexo server</code></li></ol></li><li>Theme<ol><li><code>$ git clone [https://github.com/blinkfox/hexo-theme-matery.git](https://github.com/blinkfox/hexo-theme-matery.git)</code></li><li>Copy the&nbsp;<code>hexo-theme-matery</code> folder to your&nbsp;<code>themes</code>folder of your Hexo blog project.</li><li>Modify the&nbsp;<code>_config.yml</code>of Hexo’s root folder → <code>theme: hexo-theme-matery</code></li><li><code>$ hexo server -p 4001</code></li></ol></li><li>Deploy<ol><li>Create a public repository in GitHub which name is +”.github.io”</li><li>Update <code>_config.yml</code> <pre class="line-numbers language-python" data-language="python"><code class="language-python">deploy<span class="token punctuation">:</span>  <span class="token builtin">type</span><span class="token punctuation">:</span> git  repo<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>SSH of your repository<span class="token punctuation">}</span><span class="token punctuation">}</span>  branch<span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>$ hexo generate</code></li><li><code>$ hexo deploy</code></li></ol></li><li>SSH connect issue  <img src="https://s3.bmp.ovh/imgs/2023/02/17/75b69c4c97402fc4.png" alt="https://s3.bmp.ovh/imgs/2023/02/17/75b69c4c97402fc4.png"></li><li>Customize your website<ol><li>create page for each tab</li><li>Also, create a new&nbsp;<code>_data</code>directory in your blog’s&nbsp;<code>source</code>directory and a new&nbsp;<code>friends.json</code>file in the&nbsp;<code>_data</code>directory. The contents of the file is as follows:</li><li>Configure the name of the basic menu navigation, path url and icon icon.</li><li>Secondary menu configuration method (optional)</li><li>check Search function</li><li>Translate Chinese Link to Pinyin</li><li>Post word count statistics plugin (Recommended)</li><li>Add emoji support (Optional)</li><li>Modify website footer</li><li>Modify social links</li><li>Post Front-matter</li><li>Go through config.yml</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
